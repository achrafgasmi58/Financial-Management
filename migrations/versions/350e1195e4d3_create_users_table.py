"""Create users table

Revision ID: 350e1195e4d3
Revises: c1f9a45853d6
Create Date: 2024-12-29 16:18:33.179877

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '350e1195e4d3'
down_revision = 'c1f9a45853d6'
branch_labels = None
depends_on = None


def upgrade():
    # ### Drop foreign key constraints ###
    with op.batch_alter_table('ai_insight') as batch_op:
        batch_op.drop_constraint('ai_insight_user_id_fkey', type_='foreignkey')

    with op.batch_alter_table('budget') as batch_op:
        batch_op.drop_constraint('budget_user_id_fkey', type_='foreignkey')

    with op.batch_alter_table('transaction') as batch_op:
        batch_op.drop_constraint('transaction_user_id_fkey', type_='foreignkey')

    # ### Drop the old 'user' table ###
    op.drop_table('user')

    # ### Create the new 'users' table ###
    op.create_table(
        'users',
        sa.Column('id', sa.Integer(), primary_key=True, nullable=False),
        sa.Column('email', sa.String(length=120), unique=True, nullable=False),
        sa.Column('password_hash', sa.String(length=128), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=True),
    )

    # ### Recreate the foreign key constraints ###
    with op.batch_alter_table('ai_insight') as batch_op:
        batch_op.create_foreign_key(None, 'users', ['user_id'], ['id'])

    with op.batch_alter_table('budget') as batch_op:
        batch_op.create_foreign_key(None, 'users', ['user_id'], ['id'])

    with op.batch_alter_table('transaction') as batch_op:
        batch_op.create_foreign_key(None, 'users', ['user_id'], ['id'])

def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('transaction', schema=None) as batch_op:
        batch_op.add_column(sa.Column('date', sa.DATE(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('type', sa.VARCHAR(length=10), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('is_recurring', sa.BOOLEAN(), autoincrement=False, nullable=True))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('transaction_user_id_fkey', 'user', ['user_id'], ['id'])
        batch_op.alter_column('category',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=50),
               existing_nullable=False)
        batch_op.alter_column('amount',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(),
               existing_nullable=False)
        batch_op.drop_column('timestamp')

    with op.batch_alter_table('budget', schema=None) as batch_op:
        batch_op.add_column(sa.Column('end_date', sa.DATE(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('start_date', sa.DATE(), autoincrement=False, nullable=False))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('budget_user_id_fkey', 'user', ['user_id'], ['id'])
        batch_op.alter_column('amount',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(),
               existing_nullable=False)
        batch_op.alter_column('category',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=50),
               existing_nullable=False)

    with op.batch_alter_table('ai_insight', schema=None) as batch_op:
        batch_op.add_column(sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('ai_insight_user_id_fkey', 'user', ['user_id'], ['id'])

    op.create_table('user',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('username', sa.VARCHAR(length=80), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=120), autoincrement=False, nullable=False),
    sa.Column('password', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('role', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='user_pkey'),
    sa.UniqueConstraint('email', name='user_email_key'),
    sa.UniqueConstraint('username', name='user_username_key')
    )
    op.drop_table('users')
    # ### end Alembic commands ###
